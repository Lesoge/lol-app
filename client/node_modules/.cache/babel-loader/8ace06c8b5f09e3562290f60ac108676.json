{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/losem/UNI/WebEngineering/Project/lol-app/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SACCC,UADD,EAECC,gBAFD,EAGCC,YAHD,QAIO,SAJP,C,CAMA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC9DT,EAAAA,KAAK,CACCU,IADN,CACW,qBADX,EACkCH,QADlC,EAEMI,IAFN,CAEWC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFlB,EAE0C;AAF1C,GAGMC,KAHN,CAGYC,GAAG,IACRN,QAAQ,CAAC;AACdO,IAAAA,IAAI,EAAEb,UADQ;AAEdc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFR,GAAD,CAJf;AASA,CAVM,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAChDT,EAAAA,KAAK,CACCU,IADN,CACW,kBADX,EAC+BH,QAD/B,EAEMI,IAFN,CAEWC,GAAG,IAAI;AACjB;AACA;AACA,UAAM;AAAES,MAAAA;AAAF,QAAYT,GAAG,CAACO,IAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJiB,CAKjB;;AACApB,IAAAA,YAAY,CAACoB,KAAD,CAAZ,CANiB,CAOjB;;AACA,UAAMG,OAAO,GAAGtB,UAAU,CAACmB,KAAD,CAA1B,CARiB,CASjB;;AACAZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACK,GAbN,EAcMV,KAdN,CAcYC,GAAG,IACdN,QAAQ,CAAC;AACRO,IAAAA,IAAI,EAAEb,UADE;AAERc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFd,GAAD,CAfT;AAoBA,CArBM,C,CAuBP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACxC,SAAO;AACNR,IAAAA,IAAI,EAAEZ,gBADA;AAENa,IAAAA,OAAO,EAAEO;AAFH,GAAP;AAIA,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AACnC,SAAO;AACNV,IAAAA,IAAI,EAAEX;AADA,GAAP;AAGA,CAJM,C,CAMP;;AACA,OAAO,MAAMsB,UAAU,GAAG,MAAMlB,QAAQ,IAAI;AAC3C;AACAa,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF2C,CAG3C;;AACA3B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ2C,CAK3C;;AACAQ,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACA,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport {\r\n\tGET_ERRORS,\r\n\tSET_CURRENT_USER,\r\n\tUSER_LOADING\r\n} from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n\taxios\r\n      .post(\"/api/users/register\", userData)\r\n      .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n      .catch(err =>\r\n        dispatch({\r\n\t\t\ttype: GET_ERRORS,\r\n\t\t\tpayload: err.response.data\r\n\t\t})\r\n      );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n\taxios\r\n      .post(\"/api/users/login\", userData)\r\n      .then(res => {\r\n\t\t// Save to localStorage\r\n\t\t// Set token to localStorage\r\n\t\tconst { token } = res.data;\r\n\t\tlocalStorage.setItem(\"jwtToken\", token);\r\n\t\t// Set token to Auth header\r\n\t\tsetAuthToken(token);\r\n\t\t// Decode token to get user data\r\n\t\tconst decoded = jwt_decode(token);\r\n\t\t// Set current user\r\n\t\tdispatch(setCurrentUser(decoded));\r\n      })\r\n      .catch(err =>\r\n\t\tdispatch({\r\n\t\t\ttype: GET_ERRORS,\r\n\t\t\tpayload: err.response.data\r\n\t\t})\r\n      );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n\treturn {\r\n\t\ttype: SET_CURRENT_USER,\r\n\t\tpayload: decoded\r\n\t};\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n\treturn {\r\n\t\ttype: USER_LOADING\r\n\t};\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n\t// Remove token from local storage\r\n\tlocalStorage.removeItem(\"jwtToken\");\r\n\t// Remove auth header for future requests\r\n\tsetAuthToken(false);\r\n\t// Set current user to empty object {} which will set isAuthenticated to false\r\n\tdispatch(setCurrentUser({}));\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}